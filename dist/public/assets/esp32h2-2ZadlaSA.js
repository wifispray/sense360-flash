import{ROM as n}from"./index-C4loFt4a.js";import"./index-nZ8ZdeZi.js";class S extends n{constructor(){super(...arguments),this.CHIP_NAME="ESP32-H2",this.IMAGE_CHIP_ID=16,this.EFUSE_BASE=1611335680,this.EFUSE_BLOCK1_ADDR=this.EFUSE_BASE+68,this.MAC_EFUSE_REG=this.EFUSE_BASE+68,this.UART_CLKDIV_REG=1072955412,this.UART_CLKDIV_MASK=1048575,this.UART_DATE_REG_ADDR=1610612860,this.FLASH_WRITE_SIZE=1024,this.BOOTLOADER_FLASH_OFFSET=0,this.FLASH_SIZES={"1MB":0,"2MB":16,"4MB":32,"8MB":48,"16MB":64},this.SPI_REG_BASE=1610620928,this.SPI_USR_OFFS=24,this.SPI_USR1_OFFS=28,this.SPI_USR2_OFFS=32,this.SPI_MOSI_DLEN_OFFS=36,this.SPI_MISO_DLEN_OFFS=40,this.SPI_W0_OFFS=88,this.USB_RAM_BLOCK=2048,this.UARTDEV_BUF_NO_USB=3,this.UARTDEV_BUF_NO=1070526796}async getPkgVersion(t){return await t.readReg(this.EFUSE_BLOCK1_ADDR+4*4)>>0&7}async getMinorChipVersion(t){return await t.readReg(this.EFUSE_BLOCK1_ADDR+4*3)>>18&7}async getMajorChipVersion(t){return await t.readReg(this.EFUSE_BLOCK1_ADDR+4*3)>>21&3}async getChipDescription(t){const s=await this.getPkgVersion(t);let _;s===0?_="ESP32-H2":_="unknown ESP32-H2";const i=await this.getMajorChipVersion(t),e=await this.getMinorChipVersion(t);return`${_} (revision v${i}.${e})`}async getChipFeatures(t){return["BT 5 (LE)","IEEE802.15.4","Single Core","96MHz"]}async getCrystalFreq(t){return 32}_d2h(t){const s=(+t).toString(16);return s.length===1?"0"+s:s}async postConnect(t){const s=await t.readReg(this.UARTDEV_BUF_NO)&255;t.debug("In _post_connect "+s),s==this.UARTDEV_BUF_NO_USB&&(t.ESP_RAM_BLOCK=this.USB_RAM_BLOCK)}async readMac(t){let s=await t.readReg(this.MAC_EFUSE_REG);s=s>>>0;let _=await t.readReg(this.MAC_EFUSE_REG+4);_=_>>>0&65535;const i=new Uint8Array(6);return i[0]=_>>8&255,i[1]=_&255,i[2]=s>>24&255,i[3]=s>>16&255,i[4]=s>>8&255,i[5]=s&255,this._d2h(i[0])+":"+this._d2h(i[1])+":"+this._d2h(i[2])+":"+this._d2h(i[3])+":"+this._d2h(i[4])+":"+this._d2h(i[5])}getEraseSize(t,s){return s}}export{S as ESP32H2ROM};
