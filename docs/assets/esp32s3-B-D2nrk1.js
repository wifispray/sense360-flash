import{ROM as E}from"./index-C4loFt4a.js";import"./index-nZ8ZdeZi.js";class g extends E{constructor(){super(...arguments),this.CHIP_NAME="ESP32-S3",this.IMAGE_CHIP_ID=9,this.EFUSE_BASE=1610641408,this.MAC_EFUSE_REG=this.EFUSE_BASE+68,this.EFUSE_BLOCK1_ADDR=this.EFUSE_BASE+68,this.EFUSE_BLOCK2_ADDR=this.EFUSE_BASE+92,this.UART_CLKDIV_REG=1610612756,this.UART_CLKDIV_MASK=1048575,this.UART_DATE_REG_ADDR=1610612864,this.FLASH_WRITE_SIZE=1024,this.BOOTLOADER_FLASH_OFFSET=0,this.FLASH_SIZES={"1MB":0,"2MB":16,"4MB":32,"8MB":48,"16MB":64},this.SPI_REG_BASE=1610620928,this.SPI_USR_OFFS=24,this.SPI_USR1_OFFS=28,this.SPI_USR2_OFFS=32,this.SPI_MOSI_DLEN_OFFS=36,this.SPI_MISO_DLEN_OFFS=40,this.SPI_W0_OFFS=88,this.USB_RAM_BLOCK=2048,this.UARTDEV_BUF_NO_USB=3,this.UARTDEV_BUF_NO=1070526796}async getChipDescription(t){const s=await this.getMajorChipVersion(t),r=await this.getMinorChipVersion(t),n=await this.getPkgVersion(t);return`${{0:"ESP32-S3 (QFN56)",1:"ESP32-S3-PICO-1 (LGA56)"}[n]||"unknown ESP32-S3"} (revision v${s}.${r})`}async getPkgVersion(t){return await t.readReg(this.EFUSE_BLOCK1_ADDR+4*3)>>21&7}async getRawMinorChipVersion(t){const r=await t.readReg(this.EFUSE_BLOCK1_ADDR+20)>>23&1,e=await t.readReg(this.EFUSE_BLOCK1_ADDR+4*3)>>18&7;return(r<<3)+e}async getMinorChipVersion(t){const s=await this.getRawMinorChipVersion(t);return await this.isEco0(t,s)?0:this.getRawMinorChipVersion(t)}async getRawMajorChipVersion(t){return await t.readReg(this.EFUSE_BLOCK1_ADDR+4*5)>>24&3}async getMajorChipVersion(t){const s=await this.getRawMinorChipVersion(t);return await this.isEco0(t,s)?0:this.getRawMajorChipVersion(t)}async getBlkVersionMajor(t){return await t.readReg(this.EFUSE_BLOCK2_ADDR+4*4)>>0&3}async getBlkVersionMinor(t){return await t.readReg(this.EFUSE_BLOCK1_ADDR+4*3)>>24&7}async isEco0(t,s){return(s&7)===0&&await this.getBlkVersionMajor(t)===1&&await this.getBlkVersionMinor(t)===1}async getFlashCap(t){const n=this.EFUSE_BASE+68+4*3;return await t.readReg(n)>>27&7}async getFlashVendor(t){const n=this.EFUSE_BASE+68+4*4,i=await t.readReg(n)>>0&7;return{1:"XMC",2:"GD",3:"FM",4:"TT",5:"BY"}[i]||""}async getPsramCap(t){const n=this.EFUSE_BASE+68+4*4;return await t.readReg(n)>>3&3}async getPsramVendor(t){const n=this.EFUSE_BASE+68+4*4,i=await t.readReg(n)>>7&3;return{1:"AP_3v3",2:"AP_1v8"}[i]||""}async getChipFeatures(t){const s=["Wi-Fi","BLE"],r={0:null,1:"Embedded Flash 8MB",2:"Embedded Flash 4MB"},n=await this.getFlashCap(t),e=await this.getFlashVendor(t),i=r[n],a=i!==void 0?i:"Unknown Embedded Flash";i!==null&&s.push(`${a} (${e})`);const h={0:null,1:"Embedded PSRAM 8MB",2:"Embedded PSRAM 2MB"},c=await this.getPsramCap(t),d=await this.getPsramVendor(t),o=h[c],_=o!==void 0?o:"Unknown Embedded PSRAM";return o!==null&&s.push(`${_} (${d})`),s}async getCrystalFreq(t){return 40}_d2h(t){const s=(+t).toString(16);return s.length===1?"0"+s:s}async postConnect(t){const s=await t.readReg(this.UARTDEV_BUF_NO)&255;t.debug("In _post_connect "+s),s==this.UARTDEV_BUF_NO_USB&&(t.ESP_RAM_BLOCK=this.USB_RAM_BLOCK)}async readMac(t){let s=await t.readReg(this.MAC_EFUSE_REG);s=s>>>0;let r=await t.readReg(this.MAC_EFUSE_REG+4);r=r>>>0&65535;const n=new Uint8Array(6);return n[0]=r>>8&255,n[1]=r&255,n[2]=s>>24&255,n[3]=s>>16&255,n[4]=s>>8&255,n[5]=s&255,this._d2h(n[0])+":"+this._d2h(n[1])+":"+this._d2h(n[2])+":"+this._d2h(n[3])+":"+this._d2h(n[4])+":"+this._d2h(n[5])}getEraseSize(t,s){return s}}export{g as ESP32S3ROM};
