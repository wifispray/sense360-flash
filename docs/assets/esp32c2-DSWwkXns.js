import{ESP32C3ROM as n}from"./esp32c3-DDppRcLC.js";import"./index-C4loFt4a.js";import"./index-nZ8ZdeZi.js";class E extends n{constructor(){super(...arguments),this.CHIP_NAME="ESP32-C2",this.IMAGE_CHIP_ID=12,this.EFUSE_BASE=1610647552,this.MAC_EFUSE_REG=this.EFUSE_BASE+64,this.UART_CLKDIV_REG=1610612756,this.UART_CLKDIV_MASK=1048575,this.UART_DATE_REG_ADDR=1610612860,this.XTAL_CLK_DIVIDER=1,this.FLASH_WRITE_SIZE=1024,this.BOOTLOADER_FLASH_OFFSET=0,this.FLASH_SIZES={"1MB":0,"2MB":16,"4MB":32,"8MB":48,"16MB":64},this.SPI_REG_BASE=1610620928,this.SPI_USR_OFFS=24,this.SPI_USR1_OFFS=28,this.SPI_USR2_OFFS=32,this.SPI_MOSI_DLEN_OFFS=36,this.SPI_MISO_DLEN_OFFS=40,this.SPI_W0_OFFS=88}async getPkgVersion(i){const t=this.EFUSE_BASE+64+4*1;return await i.readReg(t)>>22&7}async getChipRevision(i){const s=this.EFUSE_BASE+64,e=1,t=20,r=s+4*e;return(await i.readReg(r)&3<<t)>>t}async getChipDescription(i){let s;const e=await this.getPkgVersion(i);e===0||e===1?s="ESP32-C2":s="unknown ESP32-C2";const t=await this.getChipRevision(i);return s+=" (revision "+t+")",s}async getChipFeatures(i){return["Wi-Fi","BLE"]}async getCrystalFreq(i){const s=await i.readReg(this.UART_CLKDIV_REG)&this.UART_CLKDIV_MASK,e=i.transport.baudrate*s/1e6/this.XTAL_CLK_DIVIDER;let t;return e>33?t=40:t=26,Math.abs(t-e)>1&&i.info("WARNING: Unsupported crystal in use"),t}async changeBaudRate(i){await this.getCrystalFreq(i)===26&&i.changeBaud()}_d2h(i){const s=(+i).toString(16);return s.length===1?"0"+s:s}async readMac(i){let s=await i.readReg(this.MAC_EFUSE_REG);s=s>>>0;let e=await i.readReg(this.MAC_EFUSE_REG+4);e=e>>>0&65535;const t=new Uint8Array(6);return t[0]=e>>8&255,t[1]=e&255,t[2]=s>>24&255,t[3]=s>>16&255,t[4]=s>>8&255,t[5]=s&255,this._d2h(t[0])+":"+this._d2h(t[1])+":"+this._d2h(t[2])+":"+this._d2h(t[3])+":"+this._d2h(t[4])+":"+this._d2h(t[5])}getEraseSize(i,s){return s}}export{E as ESP32C2ROM};
