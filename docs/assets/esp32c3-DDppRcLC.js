import{ROM as o}from"./index-C4loFt4a.js";import"./index-nZ8ZdeZi.js";class E extends o{constructor(){super(...arguments),this.CHIP_NAME="ESP32-C3",this.IMAGE_CHIP_ID=5,this.EFUSE_BASE=1610647552,this.MAC_EFUSE_REG=this.EFUSE_BASE+68,this.UART_CLKDIV_REG=1072955412,this.UART_CLKDIV_MASK=1048575,this.UART_DATE_REG_ADDR=1610612860,this.FLASH_WRITE_SIZE=1024,this.BOOTLOADER_FLASH_OFFSET=0,this.FLASH_SIZES={"1MB":0,"2MB":16,"4MB":32,"8MB":48,"16MB":64},this.SPI_REG_BASE=1610620928,this.SPI_USR_OFFS=24,this.SPI_USR1_OFFS=28,this.SPI_USR2_OFFS=32,this.SPI_MOSI_DLEN_OFFS=36,this.SPI_MISO_DLEN_OFFS=40,this.SPI_W0_OFFS=88}async getPkgVersion(e){const s=this.EFUSE_BASE+68+4*3;return await e.readReg(s)>>21&7}async getChipRevision(e){const t=this.EFUSE_BASE+68,n=3,s=18,i=t+4*n;return(await e.readReg(i)&7<<s)>>s}async getChipDescription(e){let t;await this.getPkgVersion(e)===0?t="ESP32-C3":t="unknown ESP32-C3";const s=await this.getChipRevision(e);return t+=" (revision "+s+")",t}async getFlashCap(e){const s=this.EFUSE_BASE+68+4*3;return await e.readReg(s)>>27&7}async getFlashVendor(e){const s=this.EFUSE_BASE+68+4*4,r=await e.readReg(s)>>0&7;return{1:"XMC",2:"GD",3:"FM",4:"TT",5:"ZBIT"}[r]||""}async getChipFeatures(e){const t=["Wi-Fi","BLE"],n={0:null,1:"Embedded Flash 4MB",2:"Embedded Flash 2MB",3:"Embedded Flash 1MB",4:"Embedded Flash 8MB"},s=await this.getFlashCap(e),i=await this.getFlashVendor(e),r=n[s],a=r!==void 0?r:"Unknown Embedded Flash";return r!==null&&t.push(`${a} (${i})`),t}async getCrystalFreq(e){return 40}_d2h(e){const t=(+e).toString(16);return t.length===1?"0"+t:t}async readMac(e){let t=await e.readReg(this.MAC_EFUSE_REG);t=t>>>0;let n=await e.readReg(this.MAC_EFUSE_REG+4);n=n>>>0&65535;const s=new Uint8Array(6);return s[0]=n>>8&255,s[1]=n&255,s[2]=t>>24&255,s[3]=t>>16&255,s[4]=t>>8&255,s[5]=t&255,this._d2h(s[0])+":"+this._d2h(s[1])+":"+this._d2h(s[2])+":"+this._d2h(s[3])+":"+this._d2h(s[4])+":"+this._d2h(s[5])}getEraseSize(e,t){return t}}export{E as ESP32C3ROM};
