import{ROM as f}from"./index-C4loFt4a.js";import"./index-nZ8ZdeZi.js";class D extends f{constructor(){super(...arguments),this.CHIP_NAME="ESP32",this.IMAGE_CHIP_ID=0,this.EFUSE_RD_REG_BASE=1073061888,this.DR_REG_SYSCON_BASE=1073111040,this.UART_CLKDIV_REG=1072955412,this.UART_CLKDIV_MASK=1048575,this.UART_DATE_REG_ADDR=1610612856,this.XTAL_CLK_DIVIDER=1,this.FLASH_SIZES={"1MB":0,"2MB":16,"4MB":32,"8MB":48,"16MB":64},this.FLASH_WRITE_SIZE=1024,this.BOOTLOADER_FLASH_OFFSET=4096,this.SPI_REG_BASE=1072963584,this.SPI_USR_OFFS=28,this.SPI_USR1_OFFS=32,this.SPI_USR2_OFFS=36,this.SPI_W0_OFFS=128,this.SPI_MOSI_DLEN_OFFS=40,this.SPI_MISO_DLEN_OFFS=44}async readEfuse(s,t){const i=this.EFUSE_RD_REG_BASE+4*t;return s.debug("Read efuse "+i),await s.readReg(i)}async getPkgVersion(s){const t=await this.readEfuse(s,3);let i=t>>9&7;return i+=(t>>2&1)<<3,i}async getChipRevision(s){const t=await this.readEfuse(s,3),i=await this.readEfuse(s,5),e=await s.readReg(this.DR_REG_SYSCON_BASE+124),r=t>>15&1,n=i>>20&1,h=e>>31&1;return r!=0?n!=0?h!=0?3:2:1:0}async getChipDescription(s){const t=["ESP32-D0WDQ6","ESP32-D0WD","ESP32-D2WD","","ESP32-U4WDH","ESP32-PICO-D4","ESP32-PICO-V3-02"];let i="";const e=await this.getPkgVersion(s),r=await this.getChipRevision(s),n=r==3;return(await this.readEfuse(s,3)&1)!=0&&(t[0]="ESP32-S0WDQ6",t[1]="ESP32-S0WD"),n&&(t[5]="ESP32-PICO-V3"),e>=0&&e<=6?i=t[e]:i="Unknown ESP32",n&&(e===0||e===1)&&(i+="-V3"),i+" (revision "+r+")"}async getChipFeatures(s){const t=["Wi-Fi"],i=await this.readEfuse(s,3);(i&2)===0&&t.push(" BT"),(i&1)!==0?t.push(" Single Core"):t.push(" Dual Core"),(i&8192)!==0&&((i&4096)!==0?t.push(" 160MHz"):t.push(" 240MHz"));const h=await this.getPkgVersion(s);[2,4,5,6].indexOf(h)!==-1&&t.push(" Embedded Flash"),h===6&&t.push(" Embedded PSRAM"),(await this.readEfuse(s,4)>>8&31)!==0&&t.push(" VRef calibration in efuse"),(i>>14&1)!==0&&t.push(" BLK3 partially reserved");const a=await this.readEfuse(s,6)&3,c=["None","3/4","Repeat (UNSUPPORTED)","Invalid"];return t.push(" Coding Scheme "+c[a]),t}async getCrystalFreq(s){const t=await s.readReg(this.UART_CLKDIV_REG)&this.UART_CLKDIV_MASK,i=s.transport.baudrate*t/1e6/this.XTAL_CLK_DIVIDER;let e;return i>33?e=40:e=26,Math.abs(e-i)>1&&s.info("WARNING: Unsupported crystal in use"),e}_d2h(s){const t=(+s).toString(16);return t.length===1?"0"+t:t}async readMac(s){let t=await this.readEfuse(s,1);t=t>>>0;let i=await this.readEfuse(s,2);i=i>>>0;const e=new Uint8Array(6);return e[0]=i>>8&255,e[1]=i&255,e[2]=t>>24&255,e[3]=t>>16&255,e[4]=t>>8&255,e[5]=t&255,this._d2h(e[0])+":"+this._d2h(e[1])+":"+this._d2h(e[2])+":"+this._d2h(e[3])+":"+this._d2h(e[4])+":"+this._d2h(e[5])}}export{D as ESP32ROM};
